import os
import streamlit as st
import google.generativeai as genai

AI_ENABLED = True

PROMPT_IA = """
Voc√™ √© um advogado especialista em contratos de loca√ß√£o comercial. Analise o contrato abaixo protegendo o LOCAT√ÅRIO.

**TEXTO DO CONTRATO:**
{texto}

**ESTRUTURA DA AN√ÅLISE (SEJA CONCISO E DIRETO):**

## üìä RESUMO EXECUTIVO
- Avalia√ß√£o geral do contrato em 2-3 linhas
- **N√≠vel de risco:** CR√çTICO / ALTO / M√âDIO / BAIXO
- **Recomenda√ß√£o principal:** [a√ß√£o objetiva]

## ‚úÖ PONTOS POSITIVOS (m√°x. 5 itens)
Liste apenas os principais benef√≠cios ao locat√°rio, com p√°gina.

## ‚ö†Ô∏è RISCOS CR√çTICOS (m√°x. 5 itens)
Para cada risco:
- **[N√çVEL]** T√≠tulo do Risco (P√°gina X)
  - **Impacto:** [breve explica√ß√£o em 1-2 linhas]
  - **Solu√ß√£o:** [a√ß√£o espec√≠fica em 1 linha]

## üîç PONTOS DE ATEN√á√ÉO (m√°x. 3 itens)
Ambiguidades ou cl√°usulas que precisam esclarecimento.

## üìã DOCUMENTOS FALTANTES (m√°x. 5 itens)
Liste apenas os essenciais.

## ‚öñÔ∏è CONFORMIDADE LEGAL
Identifique at√© 3 viola√ß√µes principais da Lei 8.245/91.

## üéØ A√á√ïES RECOMENDADAS
Liste 3-5 a√ß√µes priorit√°rias antes da assinatura.

**IMPORTANTE:** Seja direto, use **negrito** em palavras-chave, m√°ximo 800 palavras.
"""

def configurar_api_gemini():
    try:
        api_key = st.secrets.get("GEMINI_API_KEY") or os.getenv("GEMINI_API_KEY")
        if not api_key:
            return False
        genai.configure(api_key=api_key)
        return True
    except:
        return False

@st.cache_data
def analisar_contrato_com_ia(texto: str) -> str:
    if not configurar_api_gemini():
        return "‚ùå **Erro:** GEMINI_API_KEY n√£o configurada."
    try:
        model = genai.GenerativeModel("gemini-2.5-flash")
        resposta = model.generate_content(PROMPT_IA.format(texto=texto))
        return resposta.text
    except Exception as e:
        return f"‚ùå **Erro:** {e}"